[
["index.html", "Data Science With Python Chapter 1 Prerequisites", " Data Science With Python L A Liggett 2019-04-05 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandocâ€™s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.name/tinytex/. "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 4. Figures and tables with captions will be placed in figure and table environments, respectively. And this is some other random stuff. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa import pandas as pd x = &#39;hello, python world!&#39; print(x.split(&#39; &#39;)) ## [&#39;hello,&#39;, &#39;python&#39;, &#39;world!&#39;] You can write citations, too. For example, we are using the bookdown package (Xie 2018) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["jupyter.html", "Chapter 3 JupyterLab", " Chapter 3 JupyterLab Here is a simple template that I use that controls a couple useful things when starting a new notebook. import sys sys.path.append(&#39;../util&#39;) %reload_ext autoreload %autoreload 2 from util import * import numpy as np import pandas as pd from matplotlib import pyplot as plt import seaborn as sns sns.set_palette(&#39;pastel&#39;) sns.set_style(&#39;ticks&#39;) sns.set_context(&#39;paper&#39;, font_scale=1) It is often convenient to have a notebook automatically refresh the imported libraries so that they can be modified while working on a JupyterLab notebook. %reload_ext autoreload %autoreload 2 To allow directory organization, dependcies can be separated into different directories and imported into a jupyter notebook using the following import statement. import sys sys.path.append(&#39;../util&#39;) "],
["visualization.html", "Chapter 4 Visualization 4.1 Matplotlib 4.2 Seaborn", " Chapter 4 Visualization 4.1 Matplotlib Plotting a heatmap. import matplotlib.pyplot as plt import numpy as np a = np.random.random((16, 16)) plt.imshow(a, cmap=&#39;RdBu&#39;&#39;, interpolation=&#39;nearest&#39;) plt.show() Possible heatmap colors are: Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples, Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cividis, cividis_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, hsv_r, icefire, icefire_r, inferno, inferno_r, jet, jet_r, magma, magma_r, mako, mako_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, rocket, rocket_r, seismic, seismic_r, spring, spring_r, summer, summer_r, tab10, tab10_r, tab20, tab20_r, tab20b, tab20b_r, tab20c, tab20c_r, terrain, terrain_r, twilight, twilight_r, twilight_shifted, twilight_shifted_r, viridis, viridis_r, vlag, vlag_r, winter, winter_r A simple venn diagram. from matplotlib_venn import venn2 venn2(subsets = (3, 2, 1)) A more complicated venn diagram. from matplotlib import pyplot as plt import numpy as np from matplotlib_venn import venn3, venn3_circles plt.figure(figsize=(4,4)) v = venn3(subsets=(1, 1, 1, 1, 1, 1, 1), set_labels = (&#39;A&#39;, &#39;B&#39;, &#39;C&#39;)) v.get_patch_by_id(&#39;100&#39;).set_alpha(1.0) v.get_patch_by_id(&#39;100&#39;).set_color(&#39;white&#39;) v.get_label_by_id(&#39;100&#39;).set_text(&#39;Unknown&#39;) v.get_label_by_id(&#39;A&#39;).set_text(&#39;Set &quot;A&quot;&#39;) c = venn3_circles(subsets=(1, 1, 1, 1, 1, 1, 1), linestyle=&#39;dotted&#39;) c[0].set_lw(1.0) c[0].set_ls(&#39;dotted&#39;) plt.title(&quot;Sample Venn diagram&quot;) plt.annotate(&#39;Unknown set&#39;, xy=v.get_label_by_id(&#39;100&#39;).get_position() - np.array([0, 0.05]), xytext=(-70,-70), ha=&#39;center&#39;, textcoords=&#39;offset points&#39;, bbox=dict(boxstyle=&#39;round,pad=0.5&#39;, fc=&#39;gray&#39;, alpha=0.1), arrowprops=dict(arrowstyle=&#39;-&gt;&#39;, connectionstyle=&#39;arc3,rad=0.5&#39;,color=&#39;gray&#39;)) plt.show() 4.2 Seaborn Here is a general bar plot that includes some commonly used parameters. # fits my 22 inch monitor plt.figure(figsize=(19.17,11.98)) # order controls the display order of the samples sns.catplot(x=&quot;Sample&quot;, y=&quot;Somatic&quot;, kind=&quot;bar&quot;, data=var_counts, order=labels); # keeps x-axis labels, but eliminates the tick mark plt.tick_params(labelbottom=True, bottom=False) # trim off the x-axis sns.despine(offset=10, trim=True, bottom=True) # labels plt.title(&#39;&#39;) plt.ylabel(&#39;&#39;) plt.xlabel(&#39;&#39;) # manual control of xlabels labels = [&#39;Indiv_1-a&#39;,&#39;Indiv_2&#39;,&#39;Indiv_3&#39;,&#39;Indiv_1-b&#39;] # control xtick order plt.xticks(range(len(labels)), labels, rotation=45) # control the number of x-ticks plt.locator_params(axis=&#39;x&#39;, nbins=10) # legend positioning plt.legend(loc=&#39;upper right&#39;) # log scale plt.gca().set_yscale(&#39;log&#39;) # this is better if neg values are needed plt.gca().set_yscale(&#39;symlog&#39;) # fit plot to display plt.tight_layout() plt.show() # save figure with tight_layout plt.savefig(&quot;test.svg&quot;, format=&quot;svg&quot;, bbox_inches=&quot;tight&quot;) Signifance information can be added by including p-values and label bars using the following code. x1, x2 = 0, 1 # columns to annotate on the plot y2, y1 = 20, 15 # placement of the line and how for down the vertical legs go plt.plot([x1,x1, x2, x2], [y1, y2, y2, y1], linewidth=1, color=&#39;k&#39;) # stats line plt.text((x1+x2)*.5, y2+2, &quot;p=0.09&quot;, ha=&#39;center&#39;, va=&#39;bottom&#39;) # p-value or sig "],
["biology.html", "Chapter 5 Biology 5.1 General 5.2 Biopython 5.3 UCSC Genome Browser 5.4 Ref Genome 5.5 Personal Information", " Chapter 5 Biology 5.1 General Some helpful commands for genetic sequence. from string import ascii_uppercase # python 3 from string import upper, lower # python 2 upper(&#39;tcga&#39;) lower(&#39;TCGA&#39;) title(&#39;tcga&#39;) # capitalize the first letter 5.2 Biopython Reverse complement of sequence from Bio.Seq import Seq str(Seq(i).reverse_complement()) 5.3 UCSC Genome Browser Get sequence from UCSC genome browser from subprocess import check_output, STDOUT temp = check_output(&#39;wget -qO- http://genome.ucsc.edu/cgi-bin/das/hg19/dna?segment=%s:%s,%s&#39; % (vcfObj.chrom,low,high), stderr=STDOUT, shell=True) 5.4 Ref Genome Get sequence from reference genome from subprocess import check_output, STDOUT temp = check_output(&#39;samtools faidx %s %s:%s-%s&#39; % (ref, vcfObj.chrom, low, high), stderr=STDOUT, shell=True) finalSeq = &#39;&#39; for line in temp.decode(&#39;UTF-8&#39;).split(&#39;\\n&#39;): for line in temp.decode(&#39;UTF-8&#39;).split(&#39;\\n&#39;): # this is only necessary in python 3 to convert binary to string if &#39;&gt;&#39; not in line: finalSeq += line finalSeq = finalSeq.upper() 5.5 Personal Information # parse vcf file with parseline if &#39;#&#39; not in line and &#39;chr&#39; in line: # skip the info # vcf handling from parseline import VCFObj # or from util import VCFObj vcfObj = VCFObj(vcfLine) # available attributes: ao, dp, af, wt, var, chrom, location "],
["io.html", "Chapter 6 Data I/O 6.1 Reading Data Files 6.2 Pickles", " Chapter 6 Data I/O 6.1 Reading Data Files Opening .gz files import gzip for line in gzip.open(&#39;myFile.gz&#39;): print line 6.2 Pickles Writing data in pickle format import pickle p = open(&#39;principle.pkl&#39;, &#39;wb&#39;) pickle.dump(principleData, p) p.close() Reading data in pickle format import pickle p = open(&#39;principle.pkl&#39;, &#39;rb&#39;) principleData = pickle.load(p) p.close() "],
["references.html", "References", " References "]
]
