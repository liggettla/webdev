[
["index.html", "Bootstrap and React for Web Development Chapter 1 Introduction", " Bootstrap and React for Web Development L A Liggett 2019-07-31 Chapter 1 Introduction "],
["html.html", "Chapter 2 HTML 2.1 HTML Properties 2.2 CSS", " Chapter 2 HTML 2.1 HTML Properties The head tag allows metadata to be labeled, the text of title for instance is typically listed in the tab or the status bar of the page in a browser. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt; My Web Page! &lt;/title&gt; &lt;/head&gt; &lt;/html&gt; The body specifies text for the page body. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; Hello, world! &lt;/body&gt; &lt;/html&gt; Headings specifies header text of increasingly small sizes. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h1&gt;This is the largest headline&lt;/h1&gt; &lt;h2&gt;This is also a large headline&lt;/h2&gt; &lt;h3&gt;This is a slightly smaller headline&lt;/h3&gt; &lt;h4&gt;This is an even smaller headline&lt;/h4&gt; &lt;h5&gt;This is the second-smallest headline&lt;/h5&gt; &lt;h6&gt;This is the smallest headline&lt;/h6&gt; &lt;/body&gt; &lt;/html&gt; Unordered lists specify bullet points. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; An Unordered List: &lt;ul&gt; &lt;li&gt;One Item&lt;/li&gt; &lt;li&gt;Another Item&lt;/li&gt; &lt;li&gt;Yet Another Item&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; Ordered lists number lines in increasing order. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; An Ordered List: &lt;ol&gt; &lt;li&gt;First Item&lt;/li&gt; &lt;li&gt;Second Item&lt;/li&gt; &lt;li&gt;Another Item Here&lt;/li&gt; &lt;li&gt;Fourth Item&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt; &lt;/html&gt; The image tag refers to and inserts an image as an html attribute. The alt gives alternative code if the image is missing. The height and width sets the image size in number of pixels. When the image size is set to 50% sets the image size dynamically to 50% of the browser width or height. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;img src=&quot;cat.jpg&quot; alt=&quot;cat&quot; width=&quot;300&quot; height=&quot;200&quot;&gt; &lt;img src=&quot;cat.jpg&quot; alt=&quot;cat&quot; width=&quot;50%&quot; &gt; &lt;/body&gt; &lt;/html&gt; Tables display data in a table format that can be styled in various ways. The th tag specifies the headings of each of the columns. The td tag specifies the data in each of the columns. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;First Name&lt;/th&gt; &lt;th&gt;Last Name&lt;/th&gt; &lt;th&gt;Years in Office&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;George&lt;/td&gt; &lt;td&gt;Washington&lt;/td&gt; &lt;td&gt;1789-1797&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;John&lt;/td&gt; &lt;td&gt;Adams&lt;/td&gt; &lt;td&gt;1797-1801&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Thomas&lt;/td&gt; &lt;td&gt;Jefferson&lt;/td&gt; &lt;td&gt;1801-1809&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; Tables can be styled within the header of the html document. Both the th and the td styles are defined together. border-collapse combines the borders of cells together. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Presidents&lt;/title&gt; &lt;style&gt; table { border: 2px solid black; border-collapse: collapse; width: 50%; } th, td { border: 1px solid black; padding: 5px; text-align: center; } th { background-color: lightgray; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;First Name&lt;/th&gt; &lt;th&gt;Last Name&lt;/th&gt; &lt;th&gt;Years in Office&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;George&lt;/td&gt; &lt;td&gt;Washington&lt;/td&gt; &lt;td&gt;1789-1797&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; Forms can be created and labeled as such. The placeholder text is what is written within the form before anything is entered into it. The name is similar to a variable name and can be used to refer to the form and the data that is entered into it. The text within the button is the text that will appear on the button in the page. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;form&gt; &lt;input type=&quot;text&quot; placeholder=&quot;Full Name&quot; name=&quot;name&quot;&gt; &lt;button&gt;Submit!&lt;/button&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; Text can be aligned and colord by specifying styles within the respective tags of text. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h1 style=&quot;color:red;text-align:center;&quot;&gt;Welcome to My Web Page!&lt;/h1&gt; &lt;h1 style=&quot;color:#4290f5;text-align:center;&quot;&gt;Second heading&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; Style elements can be separated from the actual body of the webpage. In this example every h1 is styled within the style portion of the header. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My Web Page!&lt;/title&gt; &lt;style&gt; h1 { color: red; text-align: center; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Welcome to My Web Page!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; 2.2 CSS CSS properties can be found here. Instead of putting the css styles within the header of the html file, they can be included in a separate css file and referenced. In this example, the type of file being referenced is classified as a stylesheet and the code is within styles.css. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt; &lt;/head&gt; &lt;/html&gt; The code that goes within the css file is here, and it is simply the same code that was put into the style headers in the above example. h1 { color: blue; text-align: center; } Divisions define sections of the code that can be separated so it can be controlled in a particular manner. Font priorities are taken left to right if some fonts are not found. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My Web Page!&lt;/title&gt; &lt;style&gt; div { background-color: teal; width: 500px; height: 400px; margin: 30px; padding: 20px; font-family: Arial, sans-serif; font-size: 28px; font-weight: bold; border: 1px dotted black; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; Hello, world! &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Divisions and spans can be named and used to refer to different parts of the html document specifically. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My Web Page!&lt;/title&gt; &lt;style&gt; #top { font-size: 36px; color: red; } .name { font-weight: bold; color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;top&quot;&gt; This is the &lt;span class=&quot;name&quot;&gt;top&lt;/span&gt; of my web page. &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Link styling can be done by adjusting colors and text decorations of links. &lt;style&gt; a:link { color: blue; background-color: transparent; text-decoration: none; } a:visited { color: red; background-color: transparent; text-decoration: none; } a:hover { color: pink; background-color: transparent; text-decoration: underline; } a:active { color: orange; background-color: transparent; text-decoration: underline; } &lt;/style&gt; "],
["bootstrap.html", "Chapter 3 Bootstrap 3.1 Setup", " Chapter 3 Bootstrap 3.1 Setup Create a folder that will contain the webfiles use npm to initialize a package.json file. Follow through the prompts to add the desired information. Set the entry point to be index.html. It can also be helpful to add the node_modules folder to .gitignore. npm init Then just initialize some basic index.html file for testing purposes. &lt;body&gt; &lt;h1&gt;This is a Header&lt;/h1&gt; &lt;p&gt;This is a paragraph&lt;/p&gt; &lt;/body&gt; Install the lite server, which will serve up the content from the folder. The save-dev flag will add the information to the json file that the lite-server should be used to serve the content. This should add lite-server under the devDependencies listing within package.json and a node-modules folder. npm install lite-server --save-dev Within the package.json file, add the start and lite listings so it looks like the following. &quot;scripts&quot;: { &quot;start&quot;: &quot;npm run lite&quot;, &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, &quot;lite&quot;: &quot;lite-server&quot; }, The lite-server can then be run using npm start. npm start "],
["hackernews.html", "Chapter 4 Hackernews 4.1 Setup", " Chapter 4 Hackernews 4.1 Setup First make sure create react app is installed. The project here follows this tutorial. There are lots of other good looking tutorials like The React Handbook, and others at gitconnected. npm i -g create-react-app Then create a new directory for the app. create-react-app hacker-news-clone Change into the newly created directory and then create a file to handle environmental variables. cd hacker-news-clone touch .env Within the .env file refer to the src folder. This will allow dependencies to be more easily imported. Add the following to the .env file. NODE_PATH=src Make a components directory within src to hold all of the components for the project. mkdir -p src/components/App Make a services directory within src to add additional functionality to the app and reference other site APIs. mkdir src/services Make a styles directory within src to add styles that can be used across the app. mkdir -p src/styles Make a store directory within src to add styles that will add Redux function. mkdir -p src/store Make a utils directory within src for shared functions across the app. mkdir -p src/utils Now move App.js to components just to keep the components bundled together. Rename App.js to index so that it can be imported from the mycomponents app. mv src/App*js src/components/App/ mv src/components/App/App.js src/components/App/index.js mv src/logo.svg src/components/App/ Delete the css files because style components will be used instead. rm src/*css Remove the imports of the css files in src/components/App/index.js. import &#39;./App.css&#39;; And remove the import within src/index.js. import &#39;./index.css&#39;; Now create some styles to be used throughout the app. mkdir src/styles touch src/styles/globals.js touch src/styles/palette.js The js files above contain routine code that can be copied from the author’s github page. Alternatively, here is the code for global.js. import { injectGlobal } from &#39;styled-components&#39;; import { colorsDark } from &#39;./palette&#39;; const setGlobalStyles = () =&gt; injectGlobal` * { box-sizing: border-box; } html, body { font-family: Lato,Helvetica-Neue,Helvetica,Arial,sans-serif; width: 100vw; overflow-x: hidden; margin: 0; padding: 0; min-height: 100vh; background-color: ${colorsDark.background}; } ul { list-style: none; padding: 0; } a { text-decoration: none; &amp;:visited { color: inherit; } } `; export default setGlobalStyles; And here is the code for palette.js. export const colorsDark = { background: &#39;#272727&#39;, backgroundSecondary: &#39;#393C3E&#39;, text: &#39;#bfbebe&#39;, textSecondary: &#39;#848886&#39;, border: &#39;#272727&#39;, }; export const colorsLight = { background: &#39;#EAEAEA&#39;, backgroundSecondary: &#39;#F8F8F8&#39;, text: &#39;#848886&#39;, textSecondary: &#39;#aaaaaa&#39;, border: &#39;#EAEAEA&#39;, }; "],
["references.html", "References", " References "]
]
