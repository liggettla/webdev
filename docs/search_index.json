[
["index.html", "Bootstrap and React for Web Development Chapter 1 Introduction", " Bootstrap and React for Web Development L A Liggett 2019-12-29 Chapter 1 Introduction "],
["html.html", "Chapter 2 HTML 2.1 HTML Properties 2.2 CSS", " Chapter 2 HTML 2.1 HTML Properties Commenting in HTML. &lt;!-- These are some comments. --&gt; The head tag allows metadata to be labeled, the text of title for instance is typically listed in the tab or the status bar of the page in a browser. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt; My Web Page! &lt;/title&gt; &lt;/head&gt; &lt;/html&gt; The body specifies text for the page body. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; Hello, world! &lt;/body&gt; &lt;/html&gt; Headings specifies header text of increasingly small sizes. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h1&gt;This is the largest headline&lt;/h1&gt; &lt;h2&gt;This is also a large headline&lt;/h2&gt; &lt;h3&gt;This is a slightly smaller headline&lt;/h3&gt; &lt;h4&gt;This is an even smaller headline&lt;/h4&gt; &lt;h5&gt;This is the second-smallest headline&lt;/h5&gt; &lt;h6&gt;This is the smallest headline&lt;/h6&gt; &lt;/body&gt; &lt;/html&gt; Unordered lists specify bullet points. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; An Unordered List: &lt;ul&gt; &lt;li&gt;One Item&lt;/li&gt; &lt;li&gt;Another Item&lt;/li&gt; &lt;li&gt;Yet Another Item&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; Ordered lists number lines in increasing order. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; An Ordered List: &lt;ol&gt; &lt;li&gt;First Item&lt;/li&gt; &lt;li&gt;Second Item&lt;/li&gt; &lt;li&gt;Another Item Here&lt;/li&gt; &lt;li&gt;Fourth Item&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt; &lt;/html&gt; The image tag refers to and inserts an image as an html attribute. The alt gives alternative code if the image is missing. The height and width sets the image size in number of pixels. When the image size is set to 50% sets the image size dynamically to 50% of the browser width or height. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;img src=&quot;cat.jpg&quot; alt=&quot;cat&quot; width=&quot;300&quot; height=&quot;200&quot;&gt; &lt;img src=&quot;cat.jpg&quot; alt=&quot;cat&quot; width=&quot;50%&quot; &gt; &lt;/body&gt; &lt;/html&gt; Tables display data in a table format that can be styled in various ways. The th tag specifies the headings of each of the columns. The td tag specifies the data in each of the columns. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;First Name&lt;/th&gt; &lt;th&gt;Last Name&lt;/th&gt; &lt;th&gt;Years in Office&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;George&lt;/td&gt; &lt;td&gt;Washington&lt;/td&gt; &lt;td&gt;1789-1797&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;John&lt;/td&gt; &lt;td&gt;Adams&lt;/td&gt; &lt;td&gt;1797-1801&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Thomas&lt;/td&gt; &lt;td&gt;Jefferson&lt;/td&gt; &lt;td&gt;1801-1809&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; Tables can be styled within the header of the html document. Both the th and the td styles are defined together. border-collapse combines the borders of cells together. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Presidents&lt;/title&gt; &lt;style&gt; table { border: 2px solid black; border-collapse: collapse; width: 50%; } th, td { border: 1px solid black; padding: 5px; text-align: center; } th { background-color: lightgray; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;First Name&lt;/th&gt; &lt;th&gt;Last Name&lt;/th&gt; &lt;th&gt;Years in Office&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;George&lt;/td&gt; &lt;td&gt;Washington&lt;/td&gt; &lt;td&gt;1789-1797&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; Forms can be created and labeled as such. The placeholder text is what is written within the form before anything is entered into it. The name is similar to a variable name and can be used to refer to the form and the data that is entered into it. The text within the button is the text that will appear on the button in the page. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;form&gt; &lt;input type=&quot;text&quot; placeholder=&quot;Full Name&quot; name=&quot;name&quot;&gt; &lt;button&gt;Submit!&lt;/button&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; Text can be aligned and colord by specifying styles within the respective tags of text. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h1 style=&quot;color:red;text-align:center;&quot;&gt;Welcome to My Web Page!&lt;/h1&gt; &lt;h1 style=&quot;color:#4290f5;text-align:center;&quot;&gt;Second heading&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; Style elements can be separated from the actual body of the webpage. In this example every h1 is styled within the style portion of the header. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My Web Page!&lt;/title&gt; &lt;style&gt; h1 { color: red; text-align: center; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Welcome to My Web Page!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; Links to local pages or hyperlinks are included within the &lt;a&gt; tag. &lt;a href=&quot;about.html&quot;&gt;About&lt;/a&gt; &lt;a href=&quot;http://www.google.com&quot;&gt;Google&lt;/a&gt; Links can also refer to locations on the same page. &lt;a href=&quot;section1&quot;&gt;Section 1&lt;/a&gt; &lt;h1 id=&quot;section1&quot;&gt;Some stuff.&lt;/h1&gt; A newline can be inserted within the body of text by using &lt;br /&gt;. &lt;a href=&quot;about.html&quot;&gt;About&lt;/a&gt;&lt;br /&gt; 2.1.1 Forms Generic text input fields can be created with the text type. &lt;div&gt; &lt;input name=&quot;name&quot; type=&quot;text&quot; placeholder=&quot;Name&quot;&gt; &lt;/div&gt; A password field is pretty similar to a text field, but the characters are obscured. &lt;input name=&quot;password&quot; type=&quot;password&quot; placeholder=&quot;Password&quot;&gt; Dropdown lists of the possible valid choices for a field can be used with datalist. &lt;input name=&quot;country&quot; list=&quot;countries&quot; placeholder=&quot;Country&quot;&gt; &lt;datalist id=&quot;countries&quot;&gt; &lt;option value=&quot;Afghanistan&quot;&gt; &lt;option value=&quot;Albania&quot;&gt; &lt;option value=&quot;Algeria&quot;&gt; 2.2 CSS Commenting in CSS. /* These are some comments. */ CSS properties can be found here. Instead of putting the css styles within the header of the html file, they can be included in a separate css file and referenced. In this example, the type of file being referenced is classified as a stylesheet and the code is within styles.css. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt; &lt;/head&gt; &lt;/html&gt; The code that goes within the css file is here, and it is simply the same code that was put into the style headers in the above example. h1 { color: blue; text-align: center; } Divisions define sections of the code that can be separated so it can be controlled in a particular manner. Font priorities are taken left to right if some fonts are not found. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My Web Page!&lt;/title&gt; &lt;style&gt; div { background-color: teal; width: 500px; height: 400px; margin: 30px; padding: 20px; font-family: Arial, sans-serif; font-size: 28px; font-weight: bold; border: 1px dotted black; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; Hello, world! &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Divisions and spans can be named and used to refer to different parts of the html document specifically. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My Web Page!&lt;/title&gt; &lt;style&gt; #top { font-size: 36px; color: red; } .name { font-weight: bold; color: blue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;top&quot;&gt; This is the &lt;span class=&quot;name&quot;&gt;top&lt;/span&gt; of my web page. &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Link styling can be done by adjusting colors and text decorations of links. &lt;style&gt; a:link { color: blue; background-color: transparent; text-decoration: none; } a:visited { color: red; background-color: transparent; text-decoration: none; } a:hover { color: pink; background-color: transparent; text-decoration: underline; } a:active { color: orange; background-color: transparent; text-decoration: underline; } &lt;/style&gt; Fonts can be imported from locations like google’s hosted fonts and used directly to avoid problems with a browser not supporting them. The link to the fonts goes within the header portion of the html code. &lt;head&gt; &lt;link href=&quot;https://fonts.googleapis.com/css?family=Cormorant+Garamond|Proza+Libre&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; The imported font families can then be used within the CSS directly. body { font-family: Proza Libre, Cormorant Garamond } Nested elements can be styled in a grouped manner. &lt;style&gt; ol li { color: red; } &lt;/style&gt; &lt;body&gt; &lt;ol&gt; &lt;li&gt;list item&lt;/li&gt; &lt;li&gt;second list item&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt; A similar use is to style the immediately nested child elements and none other using the &gt; operator. &lt;style&gt; ol &gt; li { color: red; } &lt;/style&gt; &lt;body&gt; &lt;ol&gt; &lt;li&gt;this will be colored&lt;/li&gt; &lt;ul&gt; &lt;li&gt;this won&#39;t be colored&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;this will also be colored&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt; Fields of particular types can be styled based on their type. These are examples of a text field that allows letters and numbers and a number field that only allows numbers. The fields can then be styled based on the type of field that they are. &lt;style&gt; input[type=text] { background-color: red; } &lt;/style&gt; &lt;body&gt; &lt;input name=&quot;name&quot; type=&quot;text&quot; placeholder=&quot;First Name&quot;&gt; &lt;input name=&quot;name&quot; type=&quot;number&quot; placeholder=&quot;Age&quot;&gt; &lt;/body&gt; 2.2.1 Selectors CSS Selectors allow specific classes or elements to be selected and styled individually. a, b /* Multiple element selector */ a b /* Descendant selector */ a &gt; b /* Child selector */ a + b /* Adjacent sibling selector */ [a=b] /* Attribute selector */ a:b /* Pseudoclass selector */ a::b /* Pseudoelement selector */ Pseudo-classes allow for different styling effects depending on the state of the element. &lt;style&gt; button { background-color: green; } button:hover { background-color: orange; } &lt;/style&gt; &lt;body&gt; &lt;button&gt;Click&lt;/button&gt; &lt;/body&gt; Pseudo-elements are similar but select elements also allow things to be styled by placing information at the beginning of an item. What is happening here is that there is a link amd before the link it says “Click here:”, and to the left of that the \\21d12 specifies a unicode arrow. &lt;style&gt; a::before { content: &quot;\\21d2 Click here: &quot;; font-weight: bold; } &lt;/style&gt; &lt;body&gt; &lt;a href=&quot;#&quot;&gt;A link&lt;/a&gt; &lt;/body&gt; Text highlighting can also be controlled with pseudo-elements. Here the text color turns red and the highlight is in yellow when the text is highlighted. &lt;style&gt; p::selection { color: red; background-color: yellow; } &lt;/style&gt; &lt;body&gt; &lt;p&gt;This is some text&lt;/p&gt; &lt;/body&gt; 2.2.2 Responsive Design Media queries are CSS rules that are only used if certain properties are true. A commonly used property is screen size to adjust page layouts fore mobile. It is generally a good idea to design for mobile first and adjust properties to fit desktop, as this will ensure mobile gets the fastest performace. Here the width of a column is being altered if the browser window is at least 768px in size. Altering the design in this way illustrates how development can be done “mobile-first”, as the property is altered if a desktop is used instead of mobile. @media only screen and (min-width: 768px) { /* For desktop: */ .col-1 {width: 8.33%;} } Media queries can also control content what content gets printed. Here both paragraphs get displayed on the page, but only the first paragraph appears when the page is printed. &lt;style&gt; @media print { .screen-only { display: none; } } &lt;/style&gt; &lt;body&gt; &lt;p&gt;This gets printed&lt;/p&gt; &lt;p class=&quot;screen-only&quot;&gt;This does not get printed&lt;/p&gt; &lt;/body&gt; The content of the page can also be changed using media queries. &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;style&gt; @media (min-width: 500px) { h1::before { content: &quot;Welcome to My Web Page!&quot;; } } @media (max-width: 499px) { h1::before { content: &quot;Welcome!&quot;; } } &lt;/style&gt; &lt;body&gt; &lt;h1&gt;&lt;/h1&gt; &lt;/body&gt; 2.2.3 Flexbox Flexbox styling allows elements to be dynamically arranged to fit the screen. With a wide enough screen the div elements will all be in one row, but as the screen shrinks, they will move down into new rows. &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;style&gt; .container { display: flex; flex-wrap: wrap; } .container &gt; div { background-color: springgreen; } &lt;/style&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div&gt;Some stuff&lt;/div&gt; &lt;div&gt;Some stuff&lt;/div&gt; &lt;div&gt;Some stuff&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; 2.2.4 Grid Styling In the following example a grid system is being used for the items being displayed. the grid creates the first two colums as 200px and the last column is automatically sized to fill the rest of the remaining screen. &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;style&gt; .grid { background-color: green; display: grid; grid-column-gap: 20px; gird-row-gap: 10px; grid-template-columns: 200px 200px auto; } .grid-item { background-color: white; } &lt;/style&gt; &lt;body&gt; &lt;div class=&quot;grid&quot;&gt; &lt;div class=&quot;grid-item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;3&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; "],
["bootstrap.html", "Chapter 3 Bootstrap 3.1 Setup 3.2 Columns", " Chapter 3 Bootstrap 3.1 Setup The bootstrap stylesheet &lt;link&gt; can be used directly stackpath.com by including the following reference in the &lt;head&gt; before any other listed stylesheets. &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&quot; integrity=&quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&quot; crossorigin=&quot;anonymous&quot;&gt; Here is an alternative link to the bootstrap CSS file. &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&quot; integrity=&quot;sha384-Gn5384xqQ1aoWXA+ The charset and viewport meta tags are often required for proper bootstrap responsive behaviors, and should be included when using the bootstrap css. The viewport line is a responsive meta tag that ensures proper rendering and touch zooming for mobile devices. &lt;!-- Required meta tags --&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt; 3.2 Columns Bootstrap styles a page as 12 columns. In the following code, columns that are 3/12 columns wide are used. &lt;style&gt; &lt;/style&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col=3&quot;&gt; This is stuff &lt;/div&gt; &lt;div class=&quot;col=3&quot;&gt; This is stuff &lt;/div&gt; &lt;div class=&quot;col=3&quot;&gt; This is stuff &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; Bootstrap can also style elements to take different amounts of the 12 total columns depending on the screen size. What is happening in the following code is that the columns being listed take 3/12 columns if the screen is large, as defined by the bootstrap CSS, and they take 6/12 columns if the screen is small. &lt;style&gt; .row &gt; div{ padding: 20px; background-color: teal; border: 2px solid black; } &lt;/style&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-lg-3 col-sm-6&quot;&gt; This is a section. &lt;/div&gt; &lt;div class=&quot;col-lg-3 col-sm-6&quot;&gt; This is a section. &lt;/div&gt; &lt;div class=&quot;col-lg-3 col-sm-6&quot;&gt; This is a section. &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; "],
["sass.html", "Chapter 4 Sass 4.1 Intro 4.2 Nesting 4.3 Inheritance", " Chapter 4 Sass 4.1 Intro Sass can be installed with npm. npm install -g sass Sass is an extension to CSS that adds functionality, including the addition of variables. Sass converts its code into CSS that can then be used by the browser. Below is an example of setting a Sass variable $color. $color: blue; ul { font-size:14px; color: $color; } A Sass file is then converted to CSS by running Sass and specifying the output. sass variables.scss variables.css CSS files can be automatically recompiled if any changes are detected using Sass. Here the variables.scss file is being monitored for changes and recompiled to variables.css whenever changes are detected. sass --watch variables.scss:variables.css Github pages actually will automatically compile scss files into css files when a scss file is comitted to a github repository. 4.2 Nesting Styles can be applied to divisions or items within other divisions when using sass. In the below example, the code within a sass file will style only those paragraphs that are nested within a div blue and only the ul wihin div as green. Anything outside of a div will not be styled by this scss code. div { font-size: 18px; p { color: blue; } ul { color: green; } } 4.3 Inheritance Sass uses inheritance to create generic governing rules that can then be extended by other elements. This can be useful for similar elements that share a number of properties but then have a couple of different properties. In the following example, a %message group is created with a number of different styles, then .success extends %message and thereby inherits all of the included styles but then also has a green background. %message { font-family: sans-serif; font-size: 18px; font-weight: bold; border: 1px solid black; padding: 20px; margin: 20px; } .success { @extend %message; background-color: green; } "],
["flask.html", "Chapter 5 Flask 5.1 Intro 5.2 Routes 5.3 Templates 5.4 Jinja 5.5 User Handling", " Chapter 5 Flask 5.1 Intro There seems to be a nice full flask tutorial here where a blog is created. Installation can be done through anaconda. conda install -c conda-forge flask Flask code is generally stored within a file called application.py. Below is a general framework of the flask code that resides in this file. Line 3 is creating a new flask web application. Flask applications are designed around routes. On line 5, what is happening is that the code is referring to navigation to the / or home directory. The two lines below this route give the code of what to do when a user navigates to that home directory. from flask import Flask app = Flask(__name__) @app.route(&quot;/&quot;) def index(): return &quot;Hello, world!&quot; Flask then needs to be told how to import it, by setting the FLASK_APP environment variable. If the above code is put into a file called application.py, just export that filename. It may be useful if application.py is always going to be the main filename to just add this code to the bashrc. export FLASK_APP=application.py If flask is run in debug mode, an app will update anytime a change is made to the underlying code. export FLASK_ENV=development The web application can then be run by running a flask webserver. flask run 5.2 Routes Instead of just using the main route, new routes can be created that when navigated to can have different functionality. In the following example, the route can be accessed at this address: http://127.0.0.1:5000/david @app.route(&quot;/david&quot;) def david(): return &quot;Hello, David&quot; The route can take the URL addess information dynamically and use it as a variable. In the following example, the text in the URL is being read in as a string, and the value is being assigned to the name variable. @app.route(&quot;/&lt;string:name&gt;&quot;) def hello(name): name = name.capitalize() return &quot;Hello, {}!&quot;.format(name) HTML code can also be included in the python code and can be returned and interpreted as HTML. In the following example the text that is getting returned and displayed is being styled as header text on the webpage. @app.route(&quot;/&lt;string:name&gt;&quot;) def hello(name): name = name.capitalize() return &quot;&lt;h1&gt;Hello, {}!&lt;/h1&gt;&quot;.format(name) Routes can be referred to by a link which can also pass variables. &lt;a href=&#39;{{ url_for(&#39;details&#39;, title=book.title, author=book.author) }}&#39;, method=&#39;GET&#39;&gt;Link&lt;/a&gt; The variables that get passed can then be used in application.py and passed to another html file. @app.route(&#39;/details/&lt;string:title&gt;/&lt;string:author&gt;&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;]) def details(title, author): return render_template(&#39;details.html&#39;, title=title, author=author) 5.3 Templates Instead of embedding HTML within values that get returned by python code, HTML files themselves can be served by the python code. Flask can look for HTML files and it will look in a subdirectory of the main directory called templates. So in the following example if there is an HTML file called index.html within a subdirectory called templates, that html file gets served up by the following code. @app.route(&quot;/&quot;) def index(): return render_template(&quot;index.html&quot;) Variables can also be passed from python to the html files that exist within the templates directory in order to dynamically alter the HTML content. In the following code, the headline variable is defined in python and then getting passed to HTML, and it is common that the varible names are just kept the same, though in the return function the second headline refers to the python variable and the first to the html variable just as is python methods. @app.route(&quot;/&quot;) def index(): headline = &quot;Hello thar&quot; return render_template(&quot;index.html&quot;, headline=headline) Now this headline variable can be used in HTML like so. The language being used is Jinja code. This functionality can be helpful in using the very same HTML code but allow it to perform differently. &lt;body&gt; &lt;h1&gt;{{ headline }}&lt;/h1&gt; &lt;/body&gt; 5.4 Jinja Jinja brings programming logic gates to HTML. The code must be put into an html file within the templates directory and used by flask as shown in the above templates section. &lt;body&gt; {% if new_year %} &lt;h1&gt;Happy New Year!&lt;/h1&gt; {% else %} &lt;h1&gt;Go back to work&lt;/h1&gt; {% endif %} &lt;/body&gt; Here is an example of a simple counter. {% for i in p %} {{ loop.index }} {% endfor %} For loops work pretty similar to python as well. In the following code names is a python list getting passed from application.py, and the list items are rendered as a ul in HTML. &lt;ul&gt; {% for name in names %} &lt;li&gt;{{ name }}&lt;/li&gt; {% endfor %} &lt;/ul&gt; Routes can be referred to by the name of a method within them from HTML. If the following code exists within the application.py file: @app.route(&quot;/more&quot;) def more(): return render_template(&quot;more.html&quot;) The above method more() just refers to another html file, and this html file can be used from html like so, where the jinja function url_for finds the route that contains the more() method, and then uses that URL as the link in the href. &lt;a href=&quot;{{ url_for(&#39;more&#39;) }}&quot;&gt;See more...&lt;/a&gt; 5.5 User Handling This seems like a decent guide about user authentication and handling. "],
["sql.html", "Chapter 6 SQL 6.1 Intro 6.2 Installation 6.3 Starting Local Database 6.4 Heroku 6.5 Database Hosting With Heroku 6.6 Creating a Database 6.7 Updating Data 6.8 Join/Merge 6.9 Indexing 6.10 SQL Injection 6.11 Transactions and Race Conditions 6.12 SQLAlchemy 6.13 Object-Relational Mapping 6.14 APIs", " Chapter 6 SQL 6.1 Intro SQL stands for structured query language that is designed to facilitate accessing data that is structured into table form. PostgreSQL is a version of SQL that is used in these notes. 6.2 Installation The method I can easily get to work is by installing through apt. It seems also that for some reason the install only works if the version number is specified. sudo apt-get install postgresql-9.6 postgresql-client libpq-dev conda install -c conda-forge psycopg2 flask-sqlalchemy flask-migrate Both the default database user and default database are called postgres, so switch to that user and start psql. sudo -u postgres psql Then start a server. psql I have not been able to get the installation working through a conda install but here is the reference to postgresql. conda install -c conda-forge postgresql To quit psql run \\q. 6.3 Starting Local Database First set a password for local use. sudo -u postgres psql postgres=# \\password Enter new password: Enter it again: postgres=# \\q Initially work with localhost to create a database. psql -U postgres -W -h localhost create database airplanes; \\q Export the location to the newly created database and connect or connect directly. export DATABASE_URL=&quot;postgresql://localhost/airplanes&quot;; or psql -U postgres -W -h localhost postgres://localhost/airplanes 6.4 Heroku Install Heroku. sudo snap install --classic heroku Then running any command should prompt to login to Heroku but the login command is specific for this. heroku login A sample app from heroku can be cloned to test app deployment. git clone https://github.com/heroku/python-getting-started.git cd python-getting-started From within the app directory, create the app on heroku. This will create a new app with a random name, but a name can instead be passed to manually set the app name. heroku create The app code can then be committed to the heroku server. git push heroku master Pushing the code will deploy the app, but an instance of the app must be then be run. heroku ps:scale web=1 The app can now be visited on the web. heroku open Logs can be viewed of page requests here in a way that will constantly update with each new request. heroku logs --tail The Procfile is a file within the root directory of the application that declares the command that should be executed when the app is started. Typically it contains the following. web: gunicorn gettingstarted.wsgi --log-file - 6.4.1 Heroku Dynos Heroku has some introduction to using postgresql with a deployed app. And some more extensive information as well. It also looks like CS50 has some instructions as well. By default heroku apps are deployed to a single dyno which is like a container that runs the commands specified in the Procfile. Using a free account will allow a single dyno to be used that will sleep after a half an hour of inactivity. The number of dyno containers can be scaled up and down. If scaled to zero, no containers will run the app. heroku ps:scale web=0 The number of free dyno hours is set to 550 per month and with a verified credit card on file will be set to 1000. The remaining time available for a dyno to be running for an app can be checked. heroku ps -a &lt;app-name&gt; To run the heroku test app locally first setup Django to use local assets. python manage.py collectstatic The app can then be run locally at http://localhost:5000. heroku local web Changes can be committed in a similar manner as is done with github. git add . git commit -m &#39;message&#39; git push heroku master 6.4.2 Heroku Databases The current addons including databases available to an app can be viewed. heroku addons The DATABASE_URL can be displayed. heroku config More extensive information about the app can also be displayed, includeing the postgres version (PG Version) heroku pg As long as postgresql is installed locally, it is possible to connect to the remote database. heroku pg:psql It is also possible to connect with a database that has just been initiated, where the URI is listed in the Config Vars section of the Settings, under DATABASE_URL. psql &lt;URI&gt; 6.5 Database Hosting With Heroku Navigate to https://www.heroku.com/, and create an account if you don’t already have one. On Heroku’s Dashboard, click “New” and choose “Create new app.” Give your app a name, and click “Create app.” On your app’s “Overview” page, click the “Configure Add-ons” button. In the “Add-ons” section of the page, type in and select “Heroku Postgres.” Choose the “Hobby Dev - Free” plan, which will give you access to a free PostgreSQL database that will support up to 10,000 rows of data. Click “Provision.” Now, click the “Heroku Postgres :: Database” link. You should now be on your database’s overview page. Click on “Settings”, and then “View Credentials.” This is the information you’ll need to log into your database. You can access the database via Adminer, filling in the server (the “Host” in the credentials list), your username (the “User”), your password, and the name of the database, all of which you can find on the Heroku credentials page. Use the URI found in the Settings page of Credentials to link to the database using export DATABASE_url=&quot;URI_URL&quot; 6.6 Creating a Database Note that reserved words are all being capitalized below, but this is not required, but rather a stylistic choice. To create a new database, first run psql. create database airplanes; Refer to that database. export DATABASE_URL=&quot;postgresql://localhost/airplanes&quot;; List current databases. \\list Connect to a new database; \\connect airplanes or \\c airplanes Below is the general syntax to create a PostgreSQL database. The id is being used in a manner similar to an index that will just number each of the items. The next three lines are all different data, and are of types VARCHAR and INTEGER. The NOT NULL aspect will cause the server to reject the entry if some data is added to the database but that value is not included. CREATE TABLE flights ( id SERIAL PRIMARY KEY, origin VARCHAR NOT NULL, destination VARCHAR NOT NULL, duration INTEGER NOT NULL ); Display the currently created databases. \\d Insert data into the flights database. INSERT INTO flights (origin, destination, duration) VALUES (&#39;New York&#39;, &#39;London&#39;, 415); Select all the data from flights. SELECT * FROM flights; Select only the origin and destination columns from flights. SELECT origin, destination FROM flights; Select only the data in flights where the id is 3. SELECT * FROM flights WHERE id = 3; Select only the data in flights that have an origin of New York. SELECT * FROM flights WHERE origin = &#39;New York&#39;; Boolean logic data selection from flights. SELECT * FROM flights WHERE destination = &#39;Paris&#39; AND duration &gt; 500; Average a column of data. SELECT AVG(duration) FROM flights; Combine boolean logic with calculations performed on the data. SELECT AVG(duration) FROM flights WHERE origin = &#39;New York&#39;; Count columns of matching data. SELECT COUNT(*) FROM flights; Select matching data from a list. SELECT * FROM flights WHERE origin IN (&#39;New York&#39;, &#39;Lima&#39;); Wildcards can be used to search for substrings. SELECT * FROM flights WHERE origin LIKE &#39;%a%&#39;; SQL uses LIMIT to function like HEAD. SELECT * FROM flights LIMIT 2; Order data in ascending order asc is ascending and desc is for descending. select * from flights order by duration asc; Data can be grouped together as in pandas. The following code selects the origin column, counts the number of identical origin entries and then adds this count to a new count column. select origin, count(*) from flights group by origin; Grouped data counts can be immedately filtered when searching. SELECT origin, COUNT(*) FROM flights GROUP BY origin HAVING COUNT(*) &gt; 1; 6.7 Updating Data This will change the duration of the flight from New York to London to 430. UPDATE flights SET duration = 430 WHERE origin = &#39;New York&#39; AND destination = &#39;London&#39;; Delete a set of matching data from a database. DELETE FROM flights WHERE destination = &#39;Tokyo&#39;; 6.8 Join/Merge Inner join is the default join and will only include data that is matched. Foreign keys can be used to reference the data within another table so that data does not need to be continually repeated. For instance if a number of flights are all heading to New York, the city id could be set as number 1 and then flight destination ids could be just set to 1. As an example, the following table can be created that has passenger names, and in the flight_id column, the flights database is reference to get the actual flight locations. When one database references another as in the following code, the referenced column is typically the PRIMARY KEY, thought this can be modified if necessary. CREATE TABLE passengers( id SERIAL PRIMARY KEY, name VARCHAR NOT NULL, flight_id INTEGER REFERENCES flights); It might be helpful to add some data to the above database for testing, so here is some data. INSERT INTO passengers (name, flight_id) VALUES (&#39;Alice&#39;, 1); INSERT INTO passengers (name, flight_id) VALUES (&#39;Bob&#39;, 1); INSERT INTO passengers (name, flight_id) VALUES (&#39;Charlie&#39;, 2); INSERT INTO passengers (name, flight_id) VALUES (&#39;Dave&#39;, 2); INSERT INTO passengers (name, flight_id) VALUES (&#39;Erin&#39;, 4); INSERT INTO passengers (name, flight_id) VALUES (&#39;Frank&#39;, 6); INSERT INTO passengers (name, flight_id) VALUES (&#39;Grace&#39;, 6); In order to reference the id data from the flights database for instance and match that up with the data found in the passengers database, the databases should can be joined on the id columns that correspond with each other, in an analogous manner as is performed in pandas. The following code selects the origin and destination columns from the flights database, and the name column from the passengers database, after the two databases have been joined on their respective flight id columns. SELECT origin, destination, name FROM flights JOIN passengers ON passengers.flight_id = flights.id; Data can be directly selected when merging two databases together like the following selection of on the data corresponding with the passenger named Alice. SELECT origin, destination, name FROM flights JOIN passengers ON passengers.flight_id = flights.id WHERE name = &#39;Alice&#39;; Left/right joining of databases can be performed that unlike inner join will include all of the data in the left or right database. SELECT origin, destination, name FROM flights left JOIN passengers ON passengers.flight_id = flights.id WHERE name = &#39;Alice&#39;; 6.9 Indexing Indexing allows a subset of one database (sort of like a pandas series) to be used to select data from a database (analogous to a DataFrame). In the following code, within the parentheses the flight_id column is being selected to create a “series”, and the ids are being grouped by passengers, and only those flights have more than one passenger are included within the “series”. This series of flight ids is then used to filter the original flights “DataFrame”. select * from flights where id in (select flight_id from passengers group by flight_id having count(*) &gt; 1); 6.10 SQL Injection User input should be escaped or sanitized to prevent a user from inputting SQL code into input fields and have it be directly executed as SQL. As an example if a username and password field are presented to the user, and the input is checked against a SQL database, it might look something like the following. SELECT * FROM users WHERE (username = &#39;Bill&#39;) AND (password = &#39;12345&#39;) The problem with the above code is that SQL code could theoretically be entered into the fields like the following. If 1', OR '1' = '1' is entered into the password field, now the SQL query would looks something like the following, which evaluates as True and may allow somebody access to the database. SELECT * FROM users WHERE (username = &#39;Bill&#39;) AND (password = &#39;1&#39;, OR &#39;1&#39; = &#39;1&#39;) 6.11 Transactions and Race Conditions This refers to a challenge if multiple requests simultaneously are made to the same data within a database and an attempt to modify the database occurs. The problem is that if the requests conflict in some manner the database can be improperly altered. One solution to this is transactions, where one user essentially checks-out the database and can modify it, and the second user can only modify the database after the first user as completed interacting with the database. 6.12 SQLAlchemy SQLAlchemy is a python library that can be used to interact with SQL data. The library can be installed like this: conda install -c conda-forge sqlalchemy sqlalchemy-utils SQLAlchemy can be used to interface with an SQL database. from sqlalchemy import create_engine engine = create_engine(os.getenv(&quot;DATABASE_URL&quot;)) Users should also be permitted to interact with the SQL database individually within sessions. To do this, a scoped session variable can be created and used to individually interact with the SQL database. from sqlalchemy.orm import scoped_session, sessionmaker db = scoped_session(sessionmaker(bind=engine)) # this is an example then of interacting with the database flights = db.execute(&quot;SELECT origin, destination, duration FROM flights&quot;).fetchall() for flight in flights: print(f&quot;{flight.origin} to {flight.destination}, {flight.duration} minutes.&quot;) CSV files can be used to store the information for a database, and inserted into an SQL database. Assuming flights.csv looks something like this: Paris,New York,540 Tokyo,Shanghai,185 Seoul,Mexico City,825 Mexico City,Lima,350 Hong Kong,Shanghai,130 The following code will then read flights.csv and add in the flights to the database. :origin, :destination, and :duration define placeholders within the database into which data will be inserted. This placeholder syntax also provides a layer of safety as it helps to prevent users from entering SQL code into a field and directly running SQL. def main(): f = open(&quot;flights.csv&quot;) reader = csv.reader(f) for origin, destination, duration in reader: db.execute(&quot;INSERT INTO flights (origin, destination, duration) VALUES (:origin, :destination, :duration)&quot;, {&quot;origin&quot;: origin, &quot;destination&quot;: destination, &quot;duration&quot;: duration}) print(f&quot;Added flight from {origin} to {destination} lasting {duration} minutes.&quot;) db.commit() Here are some links that may be helpful in setting up an sql database and using it with SQLAlchemy. RealPython Location of Postgresql Database Location of Postgresql Database CS50 Project1 Help Reddit CS50 SQLAlchemy Help 6.13 Object-Relational Mapping Python classes can be used to control the function of a SQL database. Typically a Python class can be used to control the functionality in a single SQL database. Below is an example of a Python class that controls some of the function of an SQL database. __tablename__ refers to the flights sql database. db.Model defines some interactivity with SQLAlchemy and the SQL database. primary_key=True indicates that this column is used as the primary way to identify the data. db.ForeignKey(&quot;flights.id&quot;) references the flights.id column within the Flight class. from flask_sqlalchemy import SQLAlchemy db = SQLAlchemy() class Flight(db.Model): __tablename__ = &quot;flights&quot; id = db.Column(db.Integer, primary_key=True) origin = db.Column(db.String, nullable=False) destination = db.Column(db.String, nullable=False) duration = db.Column(db.Integer, nullable=False) passengers = db.relationship(&quot;Passenger&quot;, backref=&quot;flight&quot;, lazy=True) class Passenger(db.Model): __tablename__ = &quot;passengers&quot; id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String, nullable=False) flight_id = db.Column(db.Integer, db.ForeignKey(&quot;flights.id&quot;), nullable=False) Creating a class in the above manner will allow modification of an SQL database using just python with SQLAlchemy. This avoids the requirement of using SQL commands explicitly within the code. The following is an example of adding flight data to a database using the Flight class. db.init_app(app) flight = Flight(origin=origin, destination=destination, duration=duration) db.session.add(flight) db.session.commit() A SQL database can also be queried with python instead of SQL commands. The first command below is how a SQL database can be queried with SQL syntax and the second is with python using SQLAlchemy. # using SQL flights = db.execute(&quot;SELECT origin, destination, duration FROM flights&quot;).fetchall() # using SQLAlchemy flights = Flight.query.all() Filtering can also be done with similar code. flights = Flight.query.filter_by(origin=&quot;Paris&quot;).first() Results can be counted. flights = Flight.query.filter_by(origin=&quot;Paris&quot;).count() Data can be retrieved by its ID, where the below code gets the row with ID 28. Flight.query.get(28) Data within a table can be modified. The following code gets the row with an ID of 6 then updates its duration to 280. flight = Flight.query.get(6) flight.duration = 280 Data can be deleted from a table. flight = Flight.query.get(6) db.session.delete(flight) Data from a table can be retrieved and ordered. Flight.query.order_by(Flight.origin.desc()).all() Table data can be retrieved when it does not match a boolean expression. Flight.query.filter( Flight.origin != &quot;Paris&quot;).all() SQL substring querying can be performed with SQLAlchemy. Flight.query.filter( Flight.origin.like(&quot;%a%&quot;)).all() SQL search can be performed using a list of values. Flight.query.filter( Flight.origin.in_( [&quot;Tokyo&quot;, &quot;Paris&quot;])).all() Boolean expressions can be used. Flight.query.filter( or_(Flight.origin == &quot;Paris&quot;, Flight.duration &gt; 500)).all() Tables can be joined together. db.session.query(Flight, Passenger).filter( Flight.id == Passenger.flight_id).all() 6.14 APIs API stands for application programming interface. JSON stands for Javascript object notation. There are a number of different HTTP request types. GET: retrieve a resource POST: create a new resource PUT: replace a resource PATCH: update a resource DELETE: delete a resource The python library requests enables requesting from python. Below is a get request which grabs the html code from google.com. import requests res = requests.get(&quot;https://www.google.com/&quot;) print(res.text) API calls should return status codes that classify the status of the request. Status codes are as follows: 200: OK 201: Created 400: Bad Request 403: Forbidden 404: Not Found 405: Method Not Allowed 422 Unprocessable Entity res = requests.get(&quot;https://api.fixer.io/latest?base=USD&amp;symbols=EUR&quot;) if res.status_code != 200: raise Exception(&quot;ERROR: API request unsuccessful.&quot;) data = res.json() print(data) An API can be designed to return a JSON object that contains some of the information from the site. In flask the application.py can use the following code to accomplish this. from flask import jsonify @app.route(&quot;/api/flights/&lt;int:flight_id&gt;&quot;) def flight_api(flight_id): &quot;&quot;&quot;Return details about a single flight.&quot;&quot;&quot; # Make sure flight exists. flight = Flight.query.get(flight_id) if flight is None: return jsonify({&quot;error&quot;: &quot;Invalid flight_id&quot;}), 422 # Get all passengers. passengers = flight.passengers names = [] for passenger in passengers: names.append(passenger.name) return jsonify({ &quot;origin&quot;: flight.origin, &quot;destination&quot;: flight.destination, &quot;duration&quot;: flight.duration, &quot;passengers&quot;: names }) "],
["javascript.html", "Chapter 7 Javascript 7.1 Intro 7.2 Event Handling 7.3 Variables 7.4 Event Listeners 7.5 Local Storage", " Chapter 7 Javascript 7.1 Intro FYI Ctrl+Shift+I in chrome opens the console. In the console commands can be entered and variables can be used that have been defined in the page. Variables can also be modified from this console as well. The &lt;script&gt; tags within the &lt;head&gt; is where javascript can be put. &lt;head&gt; &lt;script&gt; alert(&#39;Hello&#39;); &lt;/script&gt; &lt;/head&gt; 7.2 Event Handling There a number of event handlers in Javascript, and here are a few: onclick onmouseover onkeydown onkeyup onload onblur The following code creates a button that runs the hello() function only when the button is clicked. &lt;head&gt; &lt;script&gt; function hello() { alert(&#39;Hello!&#39;); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button onclick=&quot;hello()&quot;&gt;Click Here&lt;/button&gt; &lt;/body&gt; Javascript can be used to change the contents of the html within a page. In the following code, the querySelector searches for the first h1 tag on the page, and then uses the innerHTML method to modify the contents within that tag. &lt;style&gt; &lt;script&gt; function hello() { document.querySelector(&#39;h1&#39;).innerHTML = &#39;Goodbye!&#39;; } &lt;/script&gt; &lt;/style&gt; &lt;body&gt; &lt;h1&gt;Welcome!&lt;/h1&gt; &lt;button onclick=&quot;hello()&quot;&gt;Click Here!&lt;/button&gt; &lt;/body&gt; querySelector can also select by id or class. document.querySelector(&#39;tag&#39;) document.querySelector(&#39;#id&#39;) document.querySelector(&#39;.class&#39;) Here is an example that uses the id to control its contents. &lt;style&gt; &lt;script&gt; counter = 0; function count() { counter++; document.querySelector(&#39;#counter&#39;).innerHTML = counter; } &lt;/script&gt; &lt;/style&gt; &lt;body&gt; &lt;h1 id=&quot;counter&quot;&gt;0&lt;/h1&gt; &lt;button onclick=&quot;count()&quot;&gt;Click Here!&lt;/button&gt; &lt;/body&gt; Template literals allow variables to be used within a string. if (counter % 10 === 0) { alert(`Counter is at ${counter}!`); } 7.2.1 External javascript The necessary javascript can be separated out of a page and included in a something.js file and then referenced within an html file. It appears that flask’s handling of static external javascript files is a bit nuanced. At least when running locally, flask will serve static javascript files within a static directory existing within the root directory. &lt;head&gt; &lt;script src=&quot;something.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; 7.3 Variables const can not be redefined. let has block scope so it only exists within a block defined by {}. var exists within the function in which it is defined. 7.4 Event Listeners Event listeners can be run only when the DOM is loaded, and can listen for events within the html document. This can be a helpful way of offloading some of the work from the html onto javascript. Below is an example of using javascript to control the function of a button using a callback function. In the following code, the addEventListener takes two input variables, the first is DOMContentLoaded which triggers the listener to start processing after the page has loaded. For the second parameter, whatever should be triggered is passed. Below, the second parameter is an entire function being passed in, and it selects the first button, and runs the count method on a click event. &lt;head&gt; &lt;script&gt; document.addEventListener(&#39;DOMContentLoaded&#39;, function() { document.querySelector(&#39;button&#39;).onclick = count; }); let counter = 0; function count() { counter++; document.querySelector(&#39;#counter&#39;).innerHTML = counter; if (counter % 10 === 0) { alert(`Counter is at ${counter}!`); } } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 id=&quot;counter&quot;&gt;0&lt;/h1&gt; &lt;button&gt;Click Here!&lt;/button&gt; &lt;/body&gt; An event listener can be used to pull the contents of a field when a button is pressed. &lt;head&gt; &lt;script&gt; document.addEventListener(&#39;DOMContentLoaded&#39;, function() { document.querySelector(&#39;#form&#39;).onsubmit = function() { const name = document.querySelector(&#39;#name&#39;).value; alert(`Hello ${name}!`); }; }); &lt;/script&gt; &lt;title&gt;My Website&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form id=&quot;form&quot;&gt; &lt;input id=&quot;name&quot; autocomplete=&quot;off&quot; autofocus placeholder=&quot;Name&quot; type=&quot;text&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; CSS styling can be changed using javascript event listeners. document.querySelector(&#39;#red&#39;).onclick = function() { document.querySelector(&#39;#hello&#39;).style.color = &#39;red&#39;; }; Event listeners can be generalized and used for multiple elements using the dataset property. In the following code, document.querySelectorAll('.color-change') selects all of the buttons that belong ot hte color-change class. The forEach method loops through the array of all of the buttons. Then the onclick method uses button.dataset.color to reference the data-color=&quot;red&quot; part of each button to set the color of the text defined by id=&quot;hello&quot;. The data-color=&quot;red&quot; of each button can be set to anything else that follows the pattern data-* and then can be referenced with button.dataset.*. &lt;head&gt; &lt;script&gt; document.addEventListener(&#39;DOMContentLoaded&#39;, function() { // Have each button change the color of the heading document.querySelectorAll(&#39;.color-change&#39;).forEach(function(button) { button.onclick = function() { document.querySelector(&#39;#hello&#39;).style.color = button.dataset.color; }; }); }); &lt;/script&gt; &lt;title&gt;My Website&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 id=&quot;hello&quot;&gt;Hello!&lt;/h1&gt; &lt;button class=&quot;color-change&quot; data-color=&quot;red&quot;&gt;Red&lt;/button&gt; &lt;button class=&quot;color-change&quot; data-color=&quot;blue&quot;&gt;Blue&lt;/button&gt; &lt;button class=&quot;color-change&quot; data-color=&quot;green&quot;&gt;Green&lt;/button&gt; &lt;/body&gt; 7.4.1 Arrow Functions Arrow functions are new to ES6 and abbreviate the manner in which functions are created. Below a function is created that creates the Hellow World alert. () =&gt; { alert(&#39;Hello world!&#39;); } Below is a function that takes as input the variable x. x =&gt; { alert(x); } An even more succinct manner of writing a function is below. x =&gt; x * 2; Below is an example of the above code re-written to use arrow functions. &lt;script&gt; document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; { // Have each button change the color of the heading document.querySelectorAll(&#39;.color-change&#39;).forEach(button =&gt; { button.onclick = () =&gt; { document.querySelector(&#39;#hello&#39;).style.color = button.dataset.color; }; }); }); &lt;/script&gt; 7.5 Local Storage Local storage allows variables to be stored within the browser of a user and recurrently accessed by javascript even between sessions. In the following example, the value for counter is being retrieved if it can be, or if not it is set to zero when the page is first loaded. Then if the counter variable is ever modified, the new value will be stored. &lt;script&gt; // Set starting value of counter to 0 if (!localStorage.getItem(&#39;counter&#39;)) localStorage.setItem(&#39;counter&#39;, 0); document.querySelector(&#39;#counter&#39;).innerHTML = counter; localStorage.setItem(&#39;counter&#39;, counter); &lt;script&gt; All variables stored in local storage can be cleared at once. localStorage.clear() "],
["hackernews.html", "Chapter 8 Hackernews 8.1 Setup", " Chapter 8 Hackernews 8.1 Setup First make sure create react app is installed. The project here follows this tutorial. There are lots of other good looking tutorials like The React Handbook, and others at gitconnected. npm i -g create-react-app Then create a new directory for the app. create-react-app hacker-news-clone Change into the newly created directory and then create a file to handle environmental variables. cd hacker-news-clone touch .env Within the .env file refer to the src folder. This will allow dependencies to be more easily imported. Add the following to the .env file. NODE_PATH=src Make a components directory within src to hold all of the components for the project. mkdir -p src/components/App Make a services directory within src to add additional functionality to the app and reference other site APIs. mkdir src/services Make a styles directory within src to add styles that can be used across the app. mkdir -p src/styles Make a store directory within src to add styles that will add Redux function. mkdir -p src/store Make a utils directory within src for shared functions across the app. mkdir -p src/utils Now move App.js to components just to keep the components bundled together. Rename App.js to index so that it can be imported from the mycomponents app. mv src/App*js src/components/App/ mv src/components/App/App.js src/components/App/index.js mv src/logo.svg src/components/App/ Delete the css files because style components will be used instead. rm src/*css Remove the imports of the css files in src/components/App/index.js. import &#39;./App.css&#39;; And remove the import within src/index.js. import &#39;./index.css&#39;; Now create some styles to be used throughout the app. mkdir src/styles touch src/styles/globals.js touch src/styles/palette.js The js files above contain routine code that can be copied from the author’s github page. Alternatively, here is the code for global.js. import { injectGlobal } from &#39;styled-components&#39;; import { colorsDark } from &#39;./palette&#39;; const setGlobalStyles = () =&gt; injectGlobal` * { box-sizing: border-box; } html, body { font-family: Lato,Helvetica-Neue,Helvetica,Arial,sans-serif; width: 100vw; overflow-x: hidden; margin: 0; padding: 0; min-height: 100vh; background-color: ${colorsDark.background}; } ul { list-style: none; padding: 0; } a { text-decoration: none; &amp;:visited { color: inherit; } } `; export default setGlobalStyles; And here is the code for palette.js. export const colorsDark = { background: &#39;#272727&#39;, backgroundSecondary: &#39;#393C3E&#39;, text: &#39;#bfbebe&#39;, textSecondary: &#39;#848886&#39;, border: &#39;#272727&#39;, }; export const colorsLight = { background: &#39;#EAEAEA&#39;, backgroundSecondary: &#39;#F8F8F8&#39;, text: &#39;#848886&#39;, textSecondary: &#39;#aaaaaa&#39;, border: &#39;#EAEAEA&#39;, }; "],
["references.html", "References", " References "]
]
